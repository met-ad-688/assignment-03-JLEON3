---
title: Assignment 03
author:
  - name: Jonathan Leon
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
number-sections: true
date: '2025-09-24'
format:
  html:
    theme: cerulean
    toc: true
    toc-depth: 2
  docx: default
  pdf: default  
date-modified: today
date-format: long
---

1 Load the Dataset
Load the Raw Dataset:
Use Pyspark to the lightcast_data.csv file into a DataFrame:
You can reuse the previous code.
Copying code from your friend constitutes plagiarism. DO NOT DO THIS.

```{python}
#| eval: true
#| echo: true
#| fig-align: center

import pandas as pd
import plotly.express as px
import plotly.io as pio
from pyspark.sql import SparkSession
import re
import numpy as np
import plotly.graph_objects as go
from pyspark.sql.functions import col, split, explode, regexp_replace, transform, when
from pyspark.sql import functions as F
from pyspark.sql.functions import col, monotonically_increasing_id

np.random.seed(42)

pio.renderers.default = "vscode+notebook+png+html"

# Initialize Spark Session
spark = SparkSession.builder.appName("LightcastData").getOrCreate()

# Load Data
df = spark.read.option("header", "true").option("inferSchema", "true").option("multiLine","true").option("escape", "\"").csv("data/lightcast_job_postings.csv")
df.createOrReplaceTempView("job_postings")

# Show Schema and Sample Data
print("---This is Diagnostic check, No need to print it in the final doc---")

df.printSchema() # comment this line when rendering the submission
df.show(5)
```

# Data Preparation

```{python}
#Step 1: Casting salary and experience columns
df = df.withColumn("SALARY", col("SALARY").cast("float")) \
      .withColumn("SALARY_FROM", col("SALARY_FROM").cast("float")) \
      .withColumn("SALARY_TO", col("SALARY_TO").cast("float")) \
      .withColumn("MIN_YEARS_EXPERIENCE", col("MIN_YEARS_EXPERIENCE").cast("float")) \
      .withColumn("MAX_YEARS_EXPERIENCE", col("MAX_YEARS_EXPERIENCE").cast("float"))

# Step 2: Computing mediasn for salary colums
def compute_median(sdf, col_name):
    q = sdf.approxQuantile(col_name, [0.5], 0.01)
    return q[0] if q else None

median_from = compute_median(df, "SALARY_FROM")
median_to = compute_median(df, "SALARY_TO")
median_salary = compute_median(df, "SALARY")


print("Medians:", median_from, median_to, median_salary)

# Step 3: Imputing missing salaries, but not experience
df = df.fillna({
      "SALARY_FROM": median_from,
      "SALARY_TO": median_to,
      "SALARY": median_salary
})


# Step 4: Computing average salary
df = df.withColumn("Average_Salary", (col("SALARY_FROM") + col("SALARY_TO")) / 
2)

# Step 5: Selecting required columns
export_cols = [
    "EDUCATION_LEVELS_NAME",
    "REMOTE_TYPE_NAME",
    "MAX_YEARS_EXPERIENCE",
    "Average_Salary",
    "SALARY",
    "LOT_V6_SPECIALIZED_OCCUPATION_NAME"
]
df_selected = df.select(*export_cols)


# Step 6: Saving to CSV
pdf = df_selected.toPandas()
pdf.to_csv("./data/lightcast_cleaned.csv", index=False)

print("Data cleaning complete. Rows retained:", len(pdf))

```



# Salary Distribution by Industry and Employment Type
Compare salary variations across industries.
Filter the dataset
  Remove records where salary is missing or zero.
Aggregate Data
  Group by NAICS industry codes.
  Group by employment type and compute salary distribution.
Visualize results
  Create a box plot where:
    X-axis = NAICS2_NAME
    Y-axis = SALARY_FROM
    Group by EMPLOYMENT_TYPE_NAME.
  Customize colors, fonts, and styles.
Explanation: Write two sentences about what the graph reveals.

```{python}
# Code for 1st question
import pandas as pd

# filter out missing or zero salary values
pdf = df.filter(df["SALARY"] > 0).select("EMPLOYMENT_TYPE_NAME", "SALARY").toPandas()

# Clean employment type names for better readability
pdf["EMPLOYMENT_TYPE_NAME"] = pdf["EMPLOYMENT_TYPE_NAME"].apply(lambda x: re.sub(r"[^\x00-\x7F]+","",x))

# Compute median salary for soring
median_salaries = pdf.groupby("EMPLOYMENT_TYPE_NAME")["SALARY"].median()

#sort employment types based on median salary in descending order
sorted_employment_types = median_salaries.sort_values(ascending=False).index

# Apply sorted categories
pdf["EMPLOYMENT_TYPE_NAME"] = pd.Categorical(
    pdf["EMPLOYMENT_TYPE_NAME"],
    categories=sorted_employment_types,
    ordered=TRUE
)

# Create box plot with horizontal grid lines
fig = px.box(
      pdf,
      x="EMPLOYMENT_TYPE_NAME",
      y="SALARY",
      title="Salary Distribution by Employment Type",
      color_discrete_sequence=["black"], #single neutral color
      boxmode="group",
      points="all", #show all outliers
)

# Improve layout, font styles, and axis labels
fig.update_layout(
    title=dict(
          text="Salary Distribtuion by Employment Type",
          font=dict(size=30, family="Arial", color="black", weight="bold") #biggest & bold title
    )
    xaxis=dict(
        title=dict(text="Employment Type", font=dict(size=24, family="Arial", color="black, weight="bold)),
        tickangle=0,
        tickfont=dict(size=18, family="arial", color="black", weight="bold"),
        showline=True,
        linewidth=2,
        linecolor="black",
        mirror=True,
        showgrid=False,
        categoryorder="array",
        categoryarray=sorted_employment_types.tolist()
    ),
    yaxis=dict(
      
    )
)




```



# Salary Analysis by ONET Occupation Type (Bubble Chart)
Analyze how salaries differ across ONET occupation types.
Aggregate Data
  Compute median salary for each occupation in the ONET taxonomy.
Visualize results
  Create a bubble chart where:
    X-axis = ONET_NAME
    Y-axis = Median Salary
    Size = Number of job postings
  Apply custom colors and font styles.
Explanation: Write two sentences about what the graph reveals.


# Salary by Education Level
Create two groups:
  Associate’s or lower (GED, Associate, No Education Listed)
  Bachelor’s (Bachelor’s degree)
  Master’s (Master’s degree)
  PhD (PhD, Doctorate, professional degree)
Plot scatter plots for each group using, MAX_YEARS_EXPERIENCE (with jitter), Average_Salary, LOT_V6_SPECIALIZED_OCCUPATION_NAME
After each graph, add a short explanation of key insights.


# Salary by Remote Work Type
Split into three groups based on REMOTE_TYPE_NAME:
  Remote
  Hybrid
  Onsite (includes [None] and blank)
Plot scatter plots for each group using,  MAX_YEARS_EXPERIENCE (with jitter), Average_Salary, LOT_V6_SPECIALIZED_OCCUPATION_NAME
Also, create salary histograms for all three groups.
After each graph, briefly describe any patterns or comparisons.